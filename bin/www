#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('backro-battle:server');
var http = require('http');
var uuid = require('uuid/v4');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Socket event listeners
 */

var io = require('socket.io')(server);
var rooms = {};
const CHARACTERS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';

io.on('connection', function(socket) {
  console.log('a user connected');
  console.log(socket.id);

  socket.on('join room', function(player) {
    let roomName = player.roomName;
    let socketId = player.socketId;
    socket.join(roomName);
    if (typeof rooms[roomName] === 'undefined') {
      rooms[roomName] = {};
      rooms[roomName].players = {};
      rooms[roomName].inProgress = false;
      rooms[roomName].gameStatus = 'PREGAME';
      rooms[roomName].roundNumber = 0;
      rooms[roomName].sockets = [];
      rooms[roomName].readyQueue = [];

      rooms[roomName].players[socketId] = player;
      rooms[roomName].sockets.push(socket.id);
      console.log('Room ' + roomName + ' was created!');
      console.log(rooms);
    } else {
      rooms[roomName].players[socketId] = player;
      rooms[roomName].sockets.push(socket.id);
      console.log('A player joined room ' + roomName + '!');
      console.log(rooms);
      if (rooms[roomName].sockets.length > 2 && !rooms[roomName].inProgress) {
        rooms[roomName].inProgress = true;
        countdown(roomName, 'The game will begin in ', 30);
      }
    }
    let allPlayers = rooms[roomName].players;
    io.in(roomName).emit('update player list', allPlayers);
  });

  socket.on('disconnecting', function(reason) {
    let socketId = socket.id;
    let joinedRooms = Object.keys(socket.rooms);

    joinedRooms.forEach(room => {
      if (room != socketId) {
        delete rooms[room].players[socketId];
        io.in(room).emit('update player list', rooms[room].players);

        let index = rooms[room].sockets.indexOf(socketId);
        if (index > -1) rooms[room].sockets.splice(index, 1);
        if (rooms[room].sockets.length === 0) delete rooms[room];

        console.log('A player disconnected from "' + room + '" for reason: ' + reason);
      }
    });
  });

  socket.on('disconnect', function() {
    console.log('a user disconnected');
    console.log(rooms);
  });

  socket.on('chat message', function(msg) {
    console.log(msg);
    io.emit('chat message', msg);
  });

  socket.on('round ready', function(roomName) {
    countReadyPlayers(roomName, socket.id);
  });

  socket.on('player backro', function(player) {
    rooms[player.roomName].players[player.socketId] = player;
    countReadyPlayers(player.roomName, player.socketId);
  });

  socket.on('player vote', function(player, vote) {
    rooms[player.roomName].players[vote].score++;
    rooms[player.roomName].players[vote].votesReceived++;
    countReadyPlayers(player.roomName, player.socketId);
  });
});

const countdown = function(roomName, prefix, count) {
  var countdownInterval = setInterval(function() {
    count--;
    io.sockets.in(roomName).emit('countdown', prefix, count);
    if (count <= 0) {
      clearInterval(countdownInterval);
      io.sockets.in(roomName).emit('countdown finished');
    }
  }, 1000);
}

const countReadyPlayers = function(roomName, socketId) {
  let gameRoom = rooms[roomName];
  gameRoom.readyQueue.push(socketId);
  if (gameRoom.readyQueue.length === gameRoom.sockets.length) {
    gameRoom.readyQueue = [];
    if (gameRoom.roundNumber < 1 || gameRoom.gameStatus === 'RESULTS') {
      beginRound(roomName);
    } else if (gameRoom.gameStatus === 'VOTING') {
      collectVotes(roomName);
    } else if (gameRoom.gameStatus === 'COLLECT VOTES') {
      showResults(roomName);
    } else if (gameRoom.gameStatus === 'COLLECT BACKROS') {
      // begin voting round
      gameRoom.gameStatus = 'VOTING';
      io.sockets.in(roomName).emit('show backros', gameRoom.players);
      countdown(roomName, 'Got submissions! Voting round ends in ', 30);
    } else if (gameRoom.gameStatus === 'SUBMIT BACKROS') {
      // collect phrases, go to voting round
      gameRoom.gameStatus = 'COLLECT BACKROS';
      io.sockets.in(roomName).emit('collect backros');
    }
  }
}

const beginRound = function(roomName) {
  let acroLength = Math.floor((Math.random() * 3) + 3);
  rooms[roomName].roundNumber++;
  rooms[roomName].roundAcro = makeAcroString(acroLength);
  rooms[roomName].gameStatus = 'SUBMIT BACKROS';
  io.sockets.in(roomName).emit('begin round', rooms[roomName].roundAcro);
  let prefix = 'This round\'s acro is <b>' + rooms[roomName].roundAcro + '</b><br>Find a backronym in ';
  countdown(roomName, prefix, 30);
}

const collectVotes = function(roomName) {
  rooms[roomName].gameStatus = 'COLLECT VOTES';
  io.sockets.in(roomName).emit('collect votes');
}

const showResults = function(roomName) {
  rooms[roomName].gameStatus = 'RESULTS';
  io.sockets.in(roomName).emit('voting results', rooms[roomName].players);
  io.sockets.in(roomName).emit('update player list', rooms[roomName].players);
  for (const player in rooms[roomName].players) {
    rooms[roomName].players[player].votesReceived = 0;
  }
  countdown(roomName, 'The results are in! Next round begins in ', 30);
}

const makeAcroString = function(length) {
  let result = '';
  for (let i = 0; i < length; i++) {
    result += CHARACTERS.charAt(Math.floor(Math.random() * 26));
  }
  return result;
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
