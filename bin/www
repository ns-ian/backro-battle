#!/usr/bin/env node

//TODO When people leave and sockets.length < 3?
//TODO Sanitize user inputs before chat
//TODO Only allow alphanumerics for modal inputs
//TODO Don't allow blank nicknames, room names
//TODO You shouldn't be allowed to vote for your own backro!
//TODO Empty answer shouldn't appear as an item in voting round

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('backro-battle:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Socket event listeners
 */

var io = require('socket.io')(server);
var rooms = {};
const CHARACTERS = 'ABCDEFGHIJKLMNOPRSTUVWYZ'; // X isn't fun
                                               // addendum: neither is Q
io.on('connection', function(socket) {
  console.log('a user connected');
  console.log(socket.id);

  socket.on('join room', function(player) {
    let roomName = player.roomName;
    let socketId = player.socketId;
    socket.join(roomName);

    if (typeof rooms[roomName] === 'undefined') {
      rooms[roomName] = {};
      let gameRoom = rooms[roomName];

      gameRoom.players = {};
      gameRoom.inProgress = false;
      gameRoom.roundNumber = 10;
      gameRoom.sockets = [];
      gameRoom.readyQueue = [];
      gameRoom.next = beginRound;

      gameRoom.players[socketId] = player;
      gameRoom.sockets.push(socket.id);
      console.log('Room ' + roomName + ' was created!');
      console.log(rooms);
    } else {
      let gameRoom = rooms[roomName];
      gameRoom.players[socketId] = player;
      gameRoom.sockets.push(socket.id);
      console.log('A player joined room ' + roomName + '!');
      console.log(rooms);
      if (gameRoom.sockets.length > 2 && !gameRoom.inProgress) {
        gameRoom.inProgress = true;
        countdown(roomName, 'The game will begin in ${this.seconds} seconds.', { seconds: 30 });
      }
    }
    let allPlayers = rooms[roomName].players;
    io.in(roomName).emit('update player list', allPlayers);
  });

  socket.on('disconnecting', function(reason) {
    let socketId = socket.id;
    let joinedRooms = Object.keys(socket.rooms);

    joinedRooms.forEach(room => {
      if (room != socketId) {
        delete rooms[room].players[socketId];
        io.in(room).emit('update player list', rooms[room].players);

        let index = rooms[room].sockets.indexOf(socketId);
        if (index > -1) rooms[room].sockets.splice(index, 1);
        if (rooms[room].sockets.length === 0) delete rooms[room];

        console.log('A player disconnected from "' + room + '" for reason: ' + reason);
      }
    });
  });

  socket.on('disconnect', function() {
    console.log('a user disconnected');
    console.log(rooms);
  });

  socket.on('chat message', function(msg, player) {
    let gameRoom = rooms[player.roomName];
    if (
      !gameRoom.inProgress &&
      msg === 'NEWGAME' &&
      !gameRoom.readyQueue.includes(player.socketId)
    ) {
      gameRoom.readyQueue.push(player.socketId);
      if(gameRoom.readyQueue.length > 2) startNewGame(player);
    }
    io.in(player.roomName).emit('chat message', msg);
  });

  socket.on('round ready', function(roomName) {
    countReadyPlayers(roomName, socket.id);
  });

  socket.on('player backro', function(player) {
    rooms[player.roomName].players[player.socketId].backro = player.backro;
    countReadyPlayers(player.roomName, player.socketId);
  });

  socket.on('player vote', function(player, vote) {
    if (vote != null) {
      rooms[player.roomName].players[vote].score++;
      rooms[player.roomName].players[vote].votesReceived++;
    }
    countReadyPlayers(player.roomName, player.socketId);
  });
});

const countdown = function(roomName, template, time) {
  var countdownInterval = setInterval(function() {
    time.seconds--;
    io.sockets.in(roomName).emit('countdown', template, time);
    if (time.seconds <= 0) {
      clearInterval(countdownInterval);
      io.sockets.in(roomName).emit('countdown finished');
    }
  }, 1000);
}

const countReadyPlayers = function(roomName, socketId) {
  let gameRoom = rooms[roomName];
  gameRoom.readyQueue.push(socketId);
  if (gameRoom.readyQueue.length >= gameRoom.sockets.length) {
    gameRoom.readyQueue = [];
    gameRoom.next(roomName);
  }
}

const beginRound = function(roomName) {
  let gameRoom = rooms[roomName];
  let acroLength = Math.floor((Math.random() * 3) + 3);
  gameRoom.roundNumber++;
  gameRoom.roundAcro = makeAcroString(acroLength);
  gameRoom.next = collectBackros;
  io.sockets.in(roomName).emit('begin round', gameRoom.roundAcro);
  let template = 'This round\'s acro is <b>${this.acro}</b><br>You have ${this.seconds} seconds to find a backronym!';
  countdown(roomName, template, { seconds: 30, acro: gameRoom.roundAcro });
}

const collectBackros = function(roomName) {
  rooms[roomName].next = beginVoting;
  io.sockets.in(roomName).emit('collect backros');
}

const beginVoting = function(roomName) {
  rooms[roomName].next = collectVotes;
  io.sockets.in(roomName).emit('show backros', rooms[roomName].players);
  countdown(roomName, 'Got submissions! Voting round ends in ${this.seconds} seconds.', { seconds: 30 });
}

const collectVotes = function(roomName) {
  rooms[roomName].next = showResults;
  io.sockets.in(roomName).emit('collect votes');
}

const showResults = function(roomName) {
  let gameRoom = rooms[roomName];
  gameRoom.roundNumber > 9 ? gameRoom.next = postGame : gameRoom.next = beginRound;
  io.sockets.in(roomName).emit('voting results', gameRoom.players);
  io.sockets.in(roomName).emit('update player list', gameRoom.players);
  for (const player in gameRoom.players) {
    gameRoom.players[player].votesReceived = 0;
  }
  if (gameRoom.roundNumber > 9) {
    countdown(roomName, 'The results are in! Winner(s) will be declared in ${this.seconds} seconds.', { seconds: 10 });
  } else {
    countdown(roomName, 'The results are in! Next round begins in ${this.seconds} seconds.', { seconds: 30 });
  }
}

const postGame = function(roomName) {
  let gameRoom = rooms[roomName];
  let maxScore = null;
  let winners = [];

  gameRoom.next = beginRound;

  for (const player in gameRoom.players) {
    let playerScore = gameRoom.players[player].score;
    if (maxScore === null || playerScore > maxScore) {
      maxScore = playerScore;
    }
  }
  for (const player in gameRoom.players) {
    let thisPlayer = gameRoom.players[player];
    if (thisPlayer.score === maxScore) {
      winners.push(thisPlayer);
    }
  }
  announceWinners(winners, roomName);
  gameRoom.inProgress = false;
  io.sockets.in(roomName).emit('postgame message');
}

const makeAcroString = function(length) {
  let result = '';
  for (let i = 0; i < length; i++) {
    result += CHARACTERS.charAt(Math.floor(Math.random() * 24));
  }
  return result;
}

const announceWinners = function(winners, roomName) {
  let announcement = '';
  if (winners.length < 2) {
    announcement = 'And the winner is... ' + winners[0].nickname + '!';
  } else {
    let winnersString = '';
    winners.forEach((element, index) => {
      if (index === 0) {
        winnersString.concat('', element.nickname);
      } else if (index === winners.length - 1) {
        winnersString.concat(' and ', element.nickname, '!');
      } else {
        winnersString.concat(', ', element.nickname);
      }
    });
    announcement = 'And the winners are... ' + winnersString;
  }
  io.sockets.in(roomName).emit('system message', announcement);
}

const startNewGame = function(player) {
  let gameRoom = rooms[player.roomName];

  for (const p in gameRoom.players) {
    gameRoom.players[p].score = 0;
  }
  io.in(player.roomName).emit('update player list', gameRoom.players);
  gameRoom.readyQueue = [];
  gameRoom.roundNumber = 0;

  let template = 'New game requested. The first round will start in ${this.seconds} seconds...';
  countdown(player.roomName, template, { seconds: 60 });
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
